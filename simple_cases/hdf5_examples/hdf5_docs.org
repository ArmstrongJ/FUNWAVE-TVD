* Advantages of HDF5
  - Fast I/O speed
  - Small data file size
  - Self-Explanatory
  - Compatibility with many other package/software.
* Two versions of HDF5 output
There are two ways that FUNWAVE-TVD can generate the HDF5 files, one compatible(fast)
version and one fast version. For both version, the final output file would be
the same. An =HDF= file =field.h5= will be
generated at the output directory. The =field.h5= contains all field data as its
data sets and all necessary =parameters= as its =attributes=. Thus the =field.h5=
file is self-explanatory.

The compatible version firstly generates an =HDF5= file with groups and attributes
without data set, when the Fortran program is finished, all the =ascii= data
will be combined into the =HDF5= file by running a =python= script. The =python=
script is generated by the Fortran code. It is mostly just
one more step after the original =ascii= output. However, it takes even more
time than the =ascii= output

The fast version will keep on writing data to the =field.h5= file. In this way,
the parallel binary output make the IO really fast. The only
drawback of the fast version is if the program is killed other than normal
termination, the =field.h5= will will corrupted and unable to access.

If you have a very stable environment and would not kill your executable during
its running, the fast way is recommended; while if you have an unstable
environment or you may kill your executable any time, you may choose the
compatible version.

* Install HDF5
  Download the =hdf5= source code and go to the source code directory. Set up
  the installation location and run the following script
#+begin_src bash
./configure --prefix=$(LOCATION) --enable-fortran --enable-parallel
make check
make
#+end_src

make sure you have enabled the parallel environment. Or you may have to setup the
compilers and flags manually, for example

#+begin_src bash
  CC = mpicc
  FC = mpif90
  ./configure --prefix=$(LOCATION) --enable-fortran --enable-parallel
  make check
  make
#+end_src

If you need to use the compatible version, make sure you also have =python= and
=h5py= library available, as this way actually use =h5py= library to combine all
=ascii= to the =field.h5= file.

* Set up HDF5 for FUNWAVE
** The compatible version
   In the Makefile, set =HDF5 = true=, and =FASTHDF5 = false= and setup the path
   to the hdf5 library.
   
In the input file, set =FIELD_IO_TYPE = hdf5=.

** The fast version
   In the Makefile, set =HDF5 = true=, and =FASTHDF5 = true= and setup the path
   to the hdf5 library.
   
In this case, the =FIELD_IO_TYPE= variable is not necessary in the input file.

* Post-processor 
  The only difference between the =HDF5= version and the original =ascii= is the
  way to load data. In =field.h5=, the parameters are stored as attributes and
  the field are stored in different groups. The groups works in a similar way to
  the directory. Each variable will has a group and all associate data will be
  in that group. For example, if =eta= is set to output, a group named =eta= will
  be in the =field.h5= and under the group =eta=, the data corresponding to each
  output frame will be in a way like =eta/eta_00001=.
  
* Two examples
  Two examples are provided corresponding with two version. 
  In each of the example. modify the =Makefile= if necessary, then simply type
#+begin_src bash
make
#+end_src

to generate the executable and execute
#+begin_src bash
mpirun -np 4 ./funwave-*
#+end_src

You are expected to see a =field.h5= file in =output= directory.

Example for getting access to =HDF5= file with =python= is available in the
=output= directory as a =ipynb= file. To view the code and results, execute 
#+begin_src bash
jupyter-notebook
#+end_src
and the =jupyter notebook= will be opened in the browser. 
